/**
 * ๐ฏ Quick Register Example
 * ุงุณุชุฎุฏู ูุฐุง ุงููุซุงู ูุชูููุฐ ุงูุชุณุฌูู ุจุณุฑุนุฉ
 */

import React, { useState } from 'react'
import { useNavigate } from 'react-router-dom'
import { useAuth } from 'src/Context/AuthContext'
import {
  CForm,
  CFormInput,
  CButton,
  CAlert,
  CCard,
  CCardBody,
  CCardHeader,
  CContainer,
  CRow,
  CCol,
  CSpinner,
} from '@coreui/react'

export default function RegisterExample() {
  const navigate = useNavigate()
  const { register, loading, error } = useAuth()

  // ุญุงูุฉ ุงููููุฐุฌ
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    password: '',
    re_password: '',
    image: null,
  })

  const [passwordMatch, setPasswordMatch] = useState(true)

  // ูุนุงูุฌ ุชุบููุฑ ุงูุญููู
  const handleInputChange = (e) => {
    const { name, value } = e.target
    setFormData(prev => ({ ...prev, [name]: value }))

    // ุงูุชุญูู ูู ุชุทุงุจู ูููุงุช ุงููุฑูุฑ
    if (name === 're_password') {
      setPasswordMatch(value === formData.password || value === '')
    }
    if (name === 'password') {
      setPasswordMatch(value === formData.re_password || formData.re_password === '')
    }
  }

  // ูุนุงูุฌ ุชุบููุฑ ุงูุตูุฑุฉ
  const handleImageChange = (e) => {
    const file = e.target.files?.[0]
    if (file) {
      // ุงูุชุญูู ูู ุญุฌู ุงูููู (2MB max)
      if (file.size > 2 * 1024 * 1024) {
        alert('ุญุฌู ุงูุตูุฑุฉ ูุจูุฑ ุฌุฏุงู (ุงูุญุฏ ุงูุฃูุตู 2MB)')
        return
      }
      // ุงูุชุญูู ูู ููุน ุงูููู
      if (!file.type.startsWith('image/')) {
        alert('ูุฌุจ ุฃู ุชุฎุชุงุฑ ููู ุตูุฑุฉ')
        return
      }
      setFormData(prev => ({ ...prev, image: file }))
    }
  }

  // ูุนุงูุฌ ุงูุฅุฑุณุงู
  const handleSubmit = async (e) => {
    e.preventDefault()

    // ุงูุชุญูู ูู ุงูุจูุงูุงุช
    if (!passwordMatch) {
      alert('โ ูููุงุช ุงููุฑูุฑ ุบูุฑ ูุชุทุงุจูุฉ!')
      return
    }

    if (formData.password.length < 8) {
      alert('โ ูููุฉ ุงููุฑูุฑ ูุฌุจ ุฃู ุชููู 8 ุฃุญุฑู ุนูู ุงูุฃูู')
      return
    }

    try {
      console.log('๐ค ุจุฏุก ุนูููุฉ ุงูุชุณุฌูู...')

      // ุฅูุดุงุก FormData
      const data = new FormData()
      data.append('name', formData.name)
      data.append('email', formData.email)
      data.append('password', formData.password)
      data.append('re_password', formData.re_password)

      // ุฅุถุงูุฉ ุงูุตูุฑุฉ ุฅุฐุง ูุงูุช ููุฌูุฏุฉ
      if (formData.image) {
        data.append('image', formData.image)
        console.log('๐ผ๏ธ ุงูุตูุฑุฉ ุงููุถุงูุฉ:', formData.image.name)
      }

      // ุงุณุชุฏุนุงุก ุฏุงูุฉ ุงูุชุณุฌูู
      console.log('๐ ุงุณุชุฏุนุงุก API Register...')
      const result = await register(data)

      console.log('โ ุชู ุงูุชุณุฌูู ุจูุฌุงุญ!', result)

      // ุฅุธูุงุฑ ุฑุณุงูุฉ ุงููุฌุงุญ
      alert('โ ุชู ุงูุชุณุฌูู ุจูุฌุงุญ! ุณูุชู ูููู ุฅูู ููุญุฉ ุงูุชุญูู...')

      // ุงูุงูุชุธุงุฑ ููููุงู ุซู ุงูุงูุชูุงู
      setTimeout(() => {
        navigate('/dashboard')
      }, 1500)
    } catch (err) {
      console.error('โ ูุดู ุงูุชุณุฌูู:', err)
      alert('โ ูุดู ุงูุชุณุฌูู! ุชุญูู ูู Console ูููุฒูุฏ ูู ุงูุชูุงุตูู')
    }
  }

  return (
    <CContainer className="mt-5 mb-5">
      <CRow className="justify-content-center">
        <CCol md={6}>
          <CCard>
            <CCardHeader className="bg-primary text-white">
              <h4>๐ ุฅูุดุงุก ุญุณุงุจ ุฌุฏูุฏ</h4>
            </CCardHeader>
            <CCardBody>
              {/* ุนุฑุถ ุฑุณุงุฆู ุงูุฎุทุฃ */}
              {error && (
                <CAlert color="danger" className="mb-3">
                  โ {error}
                </CAlert>
              )}

              <CForm onSubmit={handleSubmit}>
                {/* ุญูู ุงูุงุณู */}
                <div className="mb-3">
                  <CFormInput
                    type="text"
                    name="name"
                    label="ุงูุงุณู ุงููุงูู *"
                    placeholder="ูุซุงู: ูุญูุฏ ุฃุญูุฏ"
                    value={formData.name}
                    onChange={handleInputChange}
                    required
                    disabled={loading}
                  />
                </div>

                {/* ุญูู ุงูุจุฑูุฏ ุงูุฅููุชุฑููู */}
                <div className="mb-3">
                  <CFormInput
                    type="email"
                    name="email"
                    label="ุงูุจุฑูุฏ ุงูุฅููุชุฑููู *"
                    placeholder="ูุซุงู: example@email.com"
                    value={formData.email}
                    onChange={handleInputChange}
                    required
                    disabled={loading}
                  />
                </div>

                {/* ุญูู ูููุฉ ุงููุฑูุฑ */}
                <div className="mb-3">
                  <CFormInput
                    type="password"
                    name="password"
                    label="ูููุฉ ุงููุฑูุฑ *"
                    placeholder="8 ุฃุญุฑู ุนูู ุงูุฃูู"
                    value={formData.password}
                    onChange={handleInputChange}
                    required
                    disabled={loading}
                    feedback="ูุฌุจ ุฃู ุชููู 8 ุฃุญุฑู ุนูู ุงูุฃูู"
                  />
                </div>

                {/* ุญูู ุชุฃููุฏ ูููุฉ ุงููุฑูุฑ */}
                <div className="mb-3">
                  <CFormInput
                    type="password"
                    name="re_password"
                    label="ุชุฃููุฏ ูููุฉ ุงููุฑูุฑ *"
                    placeholder="ุฃุนุฏ ุฅุฏุฎุงู ูููุฉ ุงููุฑูุฑ"
                    value={formData.re_password}
                    onChange={handleInputChange}
                    required
                    disabled={loading}
                    invalid={!passwordMatch && formData.re_password !== ''}
                    feedback={!passwordMatch ? 'โ ูููุงุช ุงููุฑูุฑ ุบูุฑ ูุชุทุงุจูุฉ' : ''}
                  />
                  {passwordMatch && formData.re_password && (
                    <small className="text-success">โ ูููุงุช ุงููุฑูุฑ ูุชุทุงุจูุฉ</small>
                  )}
                </div>

                {/* ุญูู ุงูุตูุฑุฉ */}
                <div className="mb-3">
                  <label className="form-label">ุตูุฑุฉ ุงูููู ุงูุดุฎุตู (ุงุฎุชูุงุฑู)</label>
                  <CFormInput
                    type="file"
                    name="image"
                    onChange={handleImageChange}
                    accept="image/*"
                    disabled={loading}
                  />
                  {formData.image && (
                    <small className="text-success d-block mt-2">
                      โ ุชู ุงุฎุชูุงุฑ ุงูุตูุฑุฉ: {formData.image.name}
                    </small>
                  )}
                </div>

                {/* ุฒุฑ ุงูุชุณุฌูู */}
                <CButton
                  color="primary"
                  type="submit"
                  disabled={loading || !passwordMatch}
                  className="w-100 mb-3"
                >
                  {loading ? (
                    <>
                      <CSpinner size="sm" className="me-2" />
                      ุฌุงุฑู ุงูุชุณุฌูู...
                    </>
                  ) : (
                    'โ ุชุณุฌูู ุญุณุงุจ'
                  )}
                </CButton>

                {/* ุฑุงุจุท ุชุณุฌูู ุงูุฏุฎูู */}
                <p className="text-center mt-3">
                  ูุฏูู ุญุณุงุจ ุจุงููุนูุ{' '}
                  <a href="/login" className="text-primary">
                    ุณุฌู ุงูุฏุฎูู ููุง
                  </a>
                </p>
              </CForm>
            </CCardBody>
          </CCard>
        </CCol>
      </CRow>
    </CContainer>
  )
}

/**
 * ๐ฏ ุฎุทูุงุช ุงูุงุณุชุฎุฏุงู:
 * 
 * 1. ุงูุณุฎ ูุฐุง ุงูููู ุฅูู: src/views/pages/RegisterExample.js
 * 
 * 2. ุฃุถูู ุฅูู routes ูู src/routes.js:
 *    {
 *      path: '/register',
 *      name: 'Register',
 *      component: RegisterExample,
 *    }
 * 
 * 3. ุงุณุชุฎุฏูู ูู ุตูุญุฉ ุงูุชุณุฌูู ุฃู ุฑุงุจุท Register
 * 
 * โ ูุฐุง ุงููุซุงู ูุชุถูู:
 * - โ ุงูุชุญูู ูู ุชุทุงุจู ูููุงุช ุงููุฑูุฑ
 * - โ ุงูุชุญูู ูู ุทูู ูููุฉ ุงููุฑูุฑ (8 ุฃุญุฑู)
 * - โ ุงูุชุญูู ูู ุญุฌู ุงูุตูุฑุฉ (2MB)
 * - โ ุงูุชุญูู ูู ููุน ุงูุตูุฑุฉ
 * - โ ุนุฑุถ ุฑุณุงุฆู ุงูุฎุทุฃ ูุงููุฌุงุญ
 * - โ ุชุญููู ุญุงูุฉ ุงูุฒุฑ (disabled ุฃุซูุงุก ุงูุฅุฑุณุงู)
 * - โ Logging ุดุงูู ูู Console
 */